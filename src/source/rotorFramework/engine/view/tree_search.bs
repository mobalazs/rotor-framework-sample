namespace Rotor.ViewBuilder

    class WidgetTree extends Rotor.ViewBuilder.WidgetTreeBase

        sub new()
            super()
        end sub

        ' * Find a widget by unique HID / glob pattern by id / regex

        function find(searchPattern as string, HID = "0" as string, untilFirstItem = false as boolean) as object

            ' todo: However goals is to use find rarely, future improvement could be a well considered id-based cache.

            ' Check if search pattern is a HID
            if true = m.hasByHID(searchPattern)
                return [m.getByHID(searchPattern)]
            end if

            ' Check if searchpattern beginning with root operator
            beginningWith = Left(searchPattern, 2)
            if beginningWith = "./"
                searchPattern = Right(searchPattern, Len(searchPattern) - 2)
                ' In this case, drop reference HID and search from the root of full tree
                HID = "0"
            end if

            ' Normalize search patter: remove all slashes from the beginning of the search pattern
            searchPattern = /^\/*/.ReplaceAll(searchPattern, "")
            ' Normalize search patter: replace 2 or more slashes to 1
            searchPattern = /\/{2,}/.ReplaceAll(searchPattern, "/")
            ' Normalize search patter: replace 3 or more stars in a row to 2
            searchPattern = /\*{3,}/.ReplaceAll(searchPattern, "**")
            ' Normalize search patter: replace ending 2 stars to 1 star
            searchPattern = /\*\*$/.ReplaceAll(searchPattern, "*")
            ' Normalize search patter: replace multiple double-star paths to one. Example: **/**/**/ -> **/
            searchPattern = /(\*\*\/){2,}/.ReplaceAll(searchPattern, "**/")

            searchPattern = LCase(searchPattern)
            parts = /\//.Split(searchPattern)

            subTree = HID = "0" ? m.tree : m.getByHID(HID)
            ' Resolve ".." operators
            while parts[0] = ".." and subTree.HID <> "0"
                parts.shift()
                subTree = m.getByHID(subTree.parentHID)
            end while

            if parts[0] <> "**" then parts.unshift("**") ' this hide human mistakes

            results = []
            lastPart = parts[parts.Count() - 1]
            if subTree.HID <> "0" and subTree.id = lastPart then results.unshift(subTree)

            ' Start find
            m.recursion_find(results, parts, untilFirstItem, subTree.children)


            if results.Count() = 0 then return invalid

            return results
        end function

        ' This function is capable to find widgets in a tree structure based on glob pattern and regex
        counterObj = { counter: 0 }
        function recursion_find(results as object, parts as object, untilFirstItem as boolean, children = {} as object, index = 0 as integer) as object

            part = parts[index]

            partsCount = parts.Count()
            isLastPart = partsCount - 1 = index
            nextPart = isLastPart ? "" : parts[index + 1]

            ' ? "/-----part: ";part
            if children.Count() > 0


                ' TODO: Future improvement: Write faster search recursion is possible
                ' if true = isLastPart
                '     if part = "*"
                '         results.append(children)
                '     end if
                ' else
                '     nextChildren = {}
                '     matchedParent = false
                '     if part = "**"
                '         if nextPart = "*"
                '             matchedParent = true
                '             nextChildren = children
                '         else if children.DoesExist(part)
                '             nextChildren = children[part].children
                '         end if
                '     else
                '         if part = "*"
                '             matchedParent = true
                '             nextChildren = widget.children
                '         else if children.DoesExist(part)
                '         end if
                '     end if


                for each id in children
                    widget = children[id]
                    ' ? id
                    if true = isLastPart
                        ' ? "isLastPart>  ";part;"  ";part = "*" or part = id
                        if part = "*" or part = id 'Lcase(id)
                            results.push(widget)
                            ' return with first hit
                            if untilFirstItem = true then return results
                        end if
                    else
                        nextChildren = {}
                        matchedParent = false
                        ' ? "part:";part;"  id:";id;"  nextPart:";nextPart
                        if part = "**"
                            if nextPart = "*" or nextPart = id ' Lcase(id)
                                matchedParent = true
                                nextChildren = children
                            else
                                nextChildren = widget.children
                            end if
                        else if part = "*" or part = id ' Lcase(id)
                            matchedParent = true
                            nextChildren = widget.children
                        end if
                        newIndex = matchedParent = true ? index + 1 : index
                        if nextChildren.Count() > 0 and newIndex < partsCount
                            m.recursion_find(results, parts, untilFirstItem, nextChildren, newIndex)
                        end if
                    end if
                end for
            end if
            return results
        end function

        function getSubtreeClone(searchPattern as string, keyPathList = [] as object, parentHID = "0" as string) as object
            subTree = m.get(searchPattern, parentHID)
            if subTree = invalid then return invalid

            ' keyPathList.push("id")
            keyPathList.push("HID")
            ' keyPathList.push("parentHID")

            subTreeClone = {}
            m.recursion_getSubtreeClone(subTree, subTreeClone, keyPathList)

            return subTreeClone
        end function

        ' Note that, there will be a type conversion: tree use AA for children but you will need Array for updates.
        sub recursion_getSubtreeClone(subTree as object, subTreeClone as object, keyPathList as object)
            ' Note that
            for each keyPath in keyPathList
                clonedValue = Rotor.Utils.getCloneByKeyPath(subTree, keyPath)
                if clonedValue <> invalid
                    Rotor.Utils.deepExtendAA(subTreeClone, clonedValue)
                end if
            end for
            if subTree.children <> invalid and subTree.children.Count() > 0
                subTreeClone.children = []
                childIndex = 0
                for each id in subTree.children
                    subTreeClone.children.push({ id: id })
                    m.recursion_getSubtreeClone(subTree.children[id], subTreeClone.children[childIndex], keyPathList)
                    childIndex++
                end for
            end if
        end sub



    end class




end namespace
