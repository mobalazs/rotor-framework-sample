import "processor.bs"
import "postProcessor.bs"
import "tree_base.bs"
import "tree_search.bs"
import "../../base/baseWidget.bs"
import "widget_create.bs"
import "widget_update.bs"
import "widget_remove.bs"
import "pluginAdapter.bs"

namespace Rotor.ViewBuilder

    class Builder

        widgetTree = new Rotor.ViewBuilder.WidgetTree()

        pluginAdapter = new Rotor.ViewBuilder.pluginAdapter()

        processor = new Rotor.ViewBuilder.Processor()
        postProcessor = new Rotor.ViewBuilder.PostProcessor()
        postProcessBuffer = new Rotor.ViewBuilder.postProcessBuffer()

        frameworkInstance as object

        isRenderProcesssing = false
        renderQueueBuffer = []

        sub init(frameworkInstance as object)
            m.frameworkInstance = frameworkInstance
            m.widgetTree.init()
            m.pluginAdapter.init(frameworkInstance)
            m.processor.init(frameworkInstance)
            m.postProcessor.init(frameworkInstance)
            m.postProcessBuffer.init(frameworkInstance)
        end sub

        sub destroy()
            m.erase()
            m.pluginAdapter.destroy()
            m.processor.destroy()
            m.postProcessor.destroy()
            m.postProcessBuffer.destroy()
            m.widgetTree.destroy()
            m.frameworkInstance = invalid
        end sub

        timer = CreateObject("roTimespan")

        sub renderQueueBufferFlush()
            m.frameworkInstance.enableRendering = true
            if m.renderQueueBuffer.Count() > 0
                request = m.renderQueueBuffer.shift()
                m.renderProcessor(request.payload, request.params, true)
            end if
        end sub

        sub render(payloads as dynamic, params = {} as object)
            for each payload in Rotor.Utils.ensureArray(payloads)
                m.renderProcessor(payload, params)
            end for
        end sub

        sub renderProcessor(payload as dynamic, params = {} as object, isCallback = false as boolean)
            ' print "[DEBUG][MEASUREMENT] Process took: " + m.timer.TotalMilliseconds().ToStr() + " ms"

            if (m.isRenderProcesssing = true and isCallback = false) or m.frameworkInstance.enableRendering = false
                m.renderQueueBuffer.push({
                    payload: payload,
                    params: params
                })
                return
            end if
            m.isRenderProcesssing = true


            m.timer.Mark()
            m.processor.run(m.postProcessBuffer, "0", payload, params)
            ' print "[VIEWBUILDER MEASUREMENT] (1) PROCESSES took: " + m.timer.TotalMilliseconds().ToStr() + " ms"
            m.timer.Mark()
            m.postProcessor.run(m.postProcessBuffer)
            ' print "[VIEWBUILDER MEASUREMENT] (2) PostProcess took: " + m.timer.TotalMilliseconds().ToStr() + " ms"
            m.postProcessBuffer.clearLifeCycleBuffers()

            if m.renderQueueBuffer.Count() > 0
                request = m.renderQueueBuffer.shift()
                m.renderProcessor(request.payload, request.params, true)
            else
                m.isRenderProcesssing = false
            end if

            print " /// [CUSTOM DEBUG] view/builder.bs [93] :: unparentedRootCount : "; GetGlobalAA().top.getRoots().Count()
            #if debug
                unparentedRootCount = GetGlobalAA().top.getRoots().Count()
                if unparentedRootCount >= 8
                    throw { message: `[WARNING] Unparented roots count = ${unparentedRootCount}` }
                    ' unparented = GetGlobalAA().top.getRootsMeta()
                end if
            #end if

        end sub

        sub erase (payload as dynamic, HID = "0" as string)

            ' normalize shortcuts

            identifiersToErase = []
            if Rotor.Utils.isString(payload)
                identifiersToErase.push(payload)
            else if Rotor.Utils.isArray(payload)
                for each item in payload
                    if Rotor.Utils.isString(item)
                        identifiersToErase.push(item)
                    else if Rotor.Utils.isAssociativeArray(item)
                        identifiersToErase.push(item?.id)
                    end if
                end for
            else if Rotor.Utils.isAssociativeArray(payload)
                for each key in payload
                    if key = "id"
                        identifiersToErase.push(key)
                    else
                        identifiersToErase.push(payload[key])
                    end if
                end for
            end if

            widgetsToRemove = []

            for each id in identifiersToErase
                result = m.widgetTree.find(id, HID)
                if result <> invalid
                    widgetsToRemove.append(result)
                end if
            end for

            if widgetsToRemove.Count() > 0

                renderObject = []

                for each widget in widgetsToRemove

                    if m.widgetTree.hasByHID(widget.HID)
                        renderObject.push({
                            HID: widget.HID,
                            parentHID: widget.parentHID,
                            id: widget.id,
                            markedToRemove: true
                        })
                    end if

                end for
                ' renderObject.Clear()
                m.render(renderObject)

            end if

        end sub

    end class

end namespace
