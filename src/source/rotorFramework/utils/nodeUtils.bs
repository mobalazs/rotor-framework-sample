namespace Rotor.Utils

    ' --------------------------------
    ' | Implement create node and set fields on demand

    function createNode(nodeType as string, fields = {} as object) as object
        node = CreateObject("roSGNode", nodeType)
        setCustomFields(node, fields, true, true)
        return node
    end function

    function createContentNode(fields = {} as object) as object
        contentNode = CreateObject("roSGNode", "ContentNode")
        contentNode.addFields(fields)
        return contentNode
    end function

    ' --------------------------------
    ' | Implement add/replace interface

    sub setCustomFields(node as object, fields as object, overwrite = true as boolean, alwaysNotify = true as boolean)
        for each attr in fields.Items()
            key = attr.key
            value = attr.value


            if node.hasField(key) = false

                ' Only addFiled can set `alwaysNotify` feature to true in runtime, so we need it;
                ' Type conversion and formatting are mandatory to make it possible.
                typeStr = convertIntrinsicType(type(value))
                node.addField(key, typeStr, alwaysNotify)

            end if

            if overwrite = true
                node.setField(key, value)
            end if

        end for
    end sub


    sub callbackScoped(callback as dynamic, scope as object, payload  = invalid as dynamic)
        isValidPayload = Rotor.Utils.isValid(payload)
        if Rotor.Utils.isString(callback)
            if true = isValidPayload
                scope[callback](payload)
            else
                scope[callback]()
            end if
        else if Rotor.Utils.isFunction(callback)
            scope._notify_tmp_fn = callback
            if true = isValidPayload
                scope._notify_tmp_fn(payload)
            else
                scope._notify_tmp_fn()
            end if
            scope._notify_tmp_fn = invalid
        end if
    end sub

    sub removeAnimation(node as object)
        node.animation.removeChildren(node.interpreters)
        if node.interpreters <> invalid
            for index = 0 to node.interpreters.Count()
                node.interpreters[index] = invalid
            end for
            node.interpreters = invalid
        end if
        node.animation = invalid
    end sub

    ' --------------------------------
    ' | Implement setup / remove font for a given node

    sub setFontAttribute(node as object, params as object)
        font = createNode("Font", {
            uri: params.uri,
            size: params.size
        })
        node.font = font
    end sub

    sub removeFontAttribute(node as object)
        node.font = invalid
    end sub

    function convertIntrinsicType(typeKey as string) as string
        typeKey = LCase(typeKey)
        types = {
            roint: "integer",
            roassocarray: "assocarray",
            rosgnode: "node"
        }
        converted = types.lookUp(typeKey)
        if converted <> invalid
            return converted
        else if Left(typeKey, 2) = "ro"
            return Right(typeKey, Len(typeKey) - 2)
        end if
        return typeKey

    end function

end namespace
