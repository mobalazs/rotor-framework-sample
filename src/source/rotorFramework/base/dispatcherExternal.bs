interface Intent
    type as string
    payload as object
end interface

namespace Rotor

    class DispatcherExternal

        sub new(dispatcherId as string, taskNode as object, threadType as string)

            ' Register dispatcher into dispatcher provider
            m.dispatcherId = dispatcherId
            m.taskNode = taskNode
            m.threadType = threadType

        end sub

        dispatcherId as string
        taskNode as object
        threadType as string
        isExternal = true
        listeners = []
        isStateObserved = false
        ' wrapObj = Rotor.Utils.wrapObject

        sub dispatch(intent as Intent)
            if intent.Count() > 1 and intent.payload = invalid then throw { message: "[WARNING] Intent payload is invalid." }
            m.taskNode.setField("rotorSync", {
                type: Rotor.const.ThreadSyncType.DISPATCH,
                payload: {
                    dispatcherId: m.dispatcherId,
                    intent: intent
                }
            })
        end sub

        sub notifyListeners(state as object)
            listenerCount = m.listeners.Count()
            listenerIndex = 0
            while listenerIndex < listenerCount
                listener = m.listeners[listenerIndex]

                callback = listener.callback
                scope = listener.listenerScope

                shouldUpdate = Rotor.Utils.isFunction(listener.shouldUpdate) ? listener.shouldUpdate(scope.props, state) : true

                if shouldUpdate

                    if Rotor.Utils.isFunction(listener.mapStateToProps)
                        listener.mapStateToProps(scope.props, state)
                    end if

                    ' populate props, available across all widgets of viewModel's
                    if callback <> invalid
                        if listener.passState
                            Rotor.Utils.callbackScoped(callback, scope, state)
                        else
                            Rotor.Utils.callbackScoped(callback, scope)
                        end if
                    end if

                    if listener?.once = true
                        ' cleanup
                        listener.listenerScope = invalid
                        listener.callback = invalid
                        ' delete
                        m.listeners.Delete(listenerIndex)
                        listenerCount--
                    else
                        listenerIndex++
                    end if

                else
                    listenerIndex++
                end if

            end while
        end sub

        sub addListener(listenerConfig as object, listenerId as string, listenerScope as object)
            if m.isStateObserved = false
                m.setupObserver()
                m.isStateObserved = true
            end if
            m.listeners.push({
                listenerId: listenerId,
                listenerScope: listenerScope,

                mapStateToProps: listenerConfig?.mapStateToProps,
                shouldUpdate: listenerConfig?.shouldUpdate ?? true,
                callback: listenerConfig?.callback ?? "onUpdateView",
                passState: listenerConfig?.passState ?? false,
                once: listenerConfig?.once ?? false
            })
        end sub

        sub removeAllListenesrByListenerId(listenerId as string)
            listenerCount = m.listeners.Count()
            listenerIndex = listenerCount - 1
            while listenerIndex >= 0 and m.listeners.Count() > 0
                if m.listeners[listenerIndex].listenerId = listenerId
                    m.listeners[listenerIndex].mapStateToProps = invalid
                    m.listeners[listenerIndex].callback = invalid
                    m.listeners[listenerIndex].listenerScope = invalid
                    m.listeners.delete(listenerIndex)
                else
                    listenerIndex--
                end if
            end while
        end sub

        function getState(mapStateToProps = invalid as Dynamic, callerScope = invalid as object) as object
            isRenderTrhead = m.threadType = Rotor.const.ThreadType.RENDER

            if isRenderTrhead
                state = m.taskNode.getField(m.dispatcherId)
                if Rotor.Utils.isFunction(mapStateToProps)
                    mapStateToProps(callerScope.props, state)
                else
                    if Rotor.Utils.isAssociativeArray(callerScope.props)
                        callerScope.props[m.dispatcherId] = state
                    end if
                end if
                return state
            else
                fieldId = m.dispatcherId
                state = m.taskNode.getField(fieldId)
                return state
            end if
        end function

        sub setupObserver()
            if m.threadType = Rotor.const.ThreadType.RENDER
                m.taskNode.observeFieldScoped(m.dispatcherId, "Rotor_dispatcherStateCallback")
            else
                fieldId = m.dispatcherId
                frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
                frameworkInstance.addObserver(fieldId, m.taskNode)
            end if
        end sub

        sub destroy()
            frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
            if m.listeners.Count() > 0
                for each listener in m.listeners
                    listener.listenerScope = invalid
                    listener.callback = invalid
                end for

                if m.threadType = Rotor.const.ThreadType.RENDER
                    m.taskNode.unobserveFieldScoped(m.dispatcherId)
                else
                    fieldId = m.dispatcherId
                    frameworkInstance.removeObserver(fieldId, m.taskNode)
                end if
            end if
            m.listeners.Clear()

            frameworkInstance.disptcherProvider.deregisterDispatcher(m.dispatcherId)

        end sub

    end class

end namespace

namespace Rotor
    ' Used by render thread (there is no waiting for m.port)
    sub dispatcherStateCallback(msg)

        dispatcherId = msg.getField()

        state = msg.getData()

        frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
        dispatcherInstance = frameworkInstance.dispatcherProvider.get(dispatcherId)
        dispatcherInstance.notifyListeners(state)

    end sub
end namespace
