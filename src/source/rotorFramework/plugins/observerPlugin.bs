namespace Rotor

    class ObserverPlugin extends BasePlugin

        sub new(key = "observer")
            super(key)
        end sub

        hooks = {
            beforeMount: sub(scope as object, widget as object)
                config = widget[scope.key]
                scope.attach(widget.node, config, widget)
            end sub,

            beforeUpdate: sub(scope as object, widget as object, newValue, oldValue = {})
                if oldValue <> invalid
                    scope.detach(widget.node, oldValue, widget)
                end if
                widget[scope.key] = newValue
                scope.attach(widget.node, newValue, widget)
            end sub,

            beforeDestroy: sub(scope as object, widget as object)
                scope.detach(widget.node)
            end sub
        }

        sub init()
            m.observerStack = new Rotor.ObserverPluginHelper.ObserverStack()
            m.helperInterfaceId = Rotor.ObserverPluginHelper.OBSERVER_HELPER_INTERFACE + "-" + m.key
        end sub

        sub attach(node as object, config as object, listenerScope as object)

            ' Prepare node - Add helper interface to the node

            if node.hasField(m.helperInterfaceId)

                pluginHelperValue = node.getField(m.helperInterfaceId)
                attachmentId = pluginHelperValue.attachmentId

            else

                attachmentId = Rotor.Utils.getUUIDHex()

                if node <> invalid
                    pluginHelperFields = Rotor.Utils.wrapObject(m.helperInterfaceId, {
                        pluginKey: m.key,
                        attachmentId: attachmentId
                    })
                    Rotor.Utils.setCustomFields(node, pluginHelperFields, true, false)
                end if

            end if

            ' Register observers one by one
            if config <> invalid and config.Count() > 0
                observerConfigs = Rotor.Utils.ensureArray(config) ' one or more observer config
                for each observerConfig in observerConfigs
                    m.registerObserver(observerConfig, node, attachmentId, m.helperInterfaceId, listenerScope)
                end for
            end if

        end sub


        sub registerObserver(observerConfig as object, node as object, attachmentId as string, helperInterfaceId as string, listenerScope as object)

            newObserver = new Rotor.ObserverPluginHelper.Observer(observerConfig, node, attachmentId, listenerScope, m.key)
            m.observerStack.set(newObserver.id, newObserver)

            fieldId = observerConfig.fieldId
            infoFields = newObserver.getInfoFields()
            node.observeFieldScoped(fieldId, "Rotor_ObserverPluginHelper_observerNativeCallback", infoFields)

        end sub

        sub detach(node as dynamic)

            pluginHelperValue = node.getField(m.helperInterfaceId)
            attachmentId = pluginHelperValue.attachmentId

            if attachmentId = invalid then return

            observers = m.observerStack.findObserverByAttachmentId(attachmentId)
            for each observer in observers
                if observer.node <> invalid
                    observer.node.unobserveFieldScoped(observer.fieldId)
                end if
                m.observerStack.remove(observer.id)
            end for

        end sub

        sub observerCallbackRouter(value as dynamic, extraInfo as object, fieldId as string, attachmentId as string, pluginKey as string)

            interestedObservers = m.observerStack.findObserversByAttachmentAndField(attachmentId, fieldId)

            for each observer in interestedObservers

                payload = Rotor.Utils.wrapObject(fieldId, value)
                payload.append(extraInfo)

                observer.notify(payload)

                ' if once
                if observer.once = true
                    m.observerStack.remove(observer.id)
                end if

            end for

        end sub

        sub destroy()
            for each id in m.attachmentStack.getAll()
                m.detach(id)
            end for
        end sub

    end class

    namespace ObserverPluginHelper

        const OBSERVER_HELPER_INTERFACE = "rotorObserverPluginKeysHelper"

        sub observerNativeCallback(msg)
            extraInfo = msg.GetInfo()
            fieldId = msg.getField()
            value = msg.getData()

            pluginKey = "" ' as default
            attachmentId = ""
            for each key in extraInfo
                if Left(key, Len(OBSERVER_HELPER_INTERFACE)) = OBSERVER_HELPER_INTERFACE
                    pluginKey = extraInfo[key].pluginkey
                    attachmentId = extraInfo[key].attachmentId
                    extraInfo.delete(key)
                end if
            end for

            if attachmentId <> "" and pluginKey <> ""
                globalScope = GetGlobalAA()
                globalScope.rotor_framework_helper.frameworkInstance.plugins[pluginKey].observerCallbackRouter(value, extraInfo, fieldId, attachmentId, pluginKey)
            end if

        end sub

        class ObserverStack extends Rotor.BaseStack

            override sub remove(id as string)
                item = m.get(id)
                if item <> invalid
                    item.destroy()
                end if
                super.remove(id)
            end sub

            function findObserversByAttachmentAndField(attachmentId as string, fieldId as string) as object
                observers = []
                for each id in m.stack
                    observer = m.stack[id]
                    if observer.fieldId = fieldId and observer.attachmentId = attachmentId
                        observers.push(observer)
                    end if
                end for
                return observers
            end function

            function findObserverByAttachmentId(attachmentId as string) as object
                observers = []
                for each id in m.stack
                    observer = m.stack[id]
                    if observer.attachmentId = attachmentId
                        observers.push(observer)
                    end if
                end for
                return observers
            end function

        end class

        class Observer

            id as string
            node as object
            pluginKey as string
            listenerScope as object
            attachmentId as string
            fieldId as string
            infoFields as object
            value as dynamic
            once as boolean

            sub new(config as object, node as object, attachmentId as string, listenerScope as object, pluginKey as string)

                m.id = (config.id ?? "ID") + "-" + Rotor.Utils.getUUIDHex()

                m.node = node

                m.pluginKey = pluginKey
                m.listenerScope = listenerScope ?? {}
                m.attachmentId = attachmentId

                m.fieldId = config?.fieldId ?? ""
                m.infoFields = config?.infoFields ?? []
                m.value = config?.value
                m.alwaysNotify = config?.alwaysNotify ?? true
                m.once = config?.once ?? false

                m.callback = config?.callback ?? sub() throw "Callback has not configured for observer"
                end Sub

                m.setupField(m.fieldId, m.value, m.alwaysNotify)

            end sub

            sub setupField(fieldId as string, value as dynamic, alwaysNotify as boolean)
                fields = {}
                fields[m.fieldId] = value
                Rotor.Utils.setCustomFields(m.node, fields, m.value <> invalid, alwaysNotify)
            end sub

            function getInfoFields() as object
                helperInterfaceId = Rotor.ObserverPluginHelper.OBSERVER_HELPER_INTERFACE + "-" + m.pluginKey
                infoFields = []
                infoFields.append(m.infoFields)
                infoFields.push(helperInterfaceId)
                return infoFields
            end function

            sub notify(payload as dynamic)
                if Rotor.Utils.isString(m.callback)
                    m.listenerScope[m.callback](m.listenerScope, payload)
                else if Rotor.Utils.isFunction(m.callback)
                    Rotor.Utils.callbackScoped(m.callback, m.listenerScope, m.listenerScope, payload)
                end if
            end sub

            sub destroy()
                m.node = invalid
                m.callback = invalid
                m.listenerScope = invalid
            end sub

        end class

    end namespace

end namespace
