' constants
import "pkg:/source/rotorFramework/engine/constants.bs"

' engine
import "pkg:/source/rotorFramework/engine/providers/dispatcherProvider.bs"
import "pkg:/source/rotorFramework/engine/providers/dispatcherFacade.bs"

' base classes
import "pkg:/source/rotorFramework/base/dispatcher.bs"
import "pkg:/source/rotorFramework/base/dispatcherExternal.bs"
import "pkg:/source/rotorFramework/base/baseReducer.bs"
import "pkg:/source/rotorFramework/base/baseModel.bs"
import "pkg:/source/rotorFramework/base/baseStack.bs"

' utils
import "pkg:/source/rotorFramework/utils/generalUtils.bs"
import "pkg:/source/rotorFramework/utils/nodeUtils.bs"
import "pkg:/source/rotorFramework/utils/arrayUtils.bs"

namespace Rotor
    class FrameworkTask

        name = "Rotor Framework Task"

        version = "0.2"

        'CONSTRUCTOR

        config = {
            tasks: invalid, ' optional
            debug: {
            }
        }

        threadType = Rotor.const.ThreadType.TASK

        sub new(config = {} as object)

            Rotor.Utils.deepExtendAA(m.config, config)

            globalScope = GetGlobalAA()
            globalScope.rotor_framework_helper = { ' this give to dispatcher instance the possibility to self-register
                threadType: m.threadType,
                frameworkInstance: m
            }
            m.taskNode = globalScope.top

            m.dispatcherProvider = new Rotor.DispatcherProvider(m.threadType)

            m.taskNode.addField("rotorSync", "assocarray", true)
            m.port = CreateObject("roMessagePort")
            m.taskNode.observeFieldScoped("rotorSync", m.port)

        end sub

        sub sync()
            m.notifySyncStatus(Rotor.const.ThreadSyncType.TASK_SYNCING)

            while true
                msg = wait(0, m.port)
                if msg <> invalid
                    msgType = type(msg)
                    if msgType = "roSGNodeEvent"
                        fieldId = msg.getField()

                        if fieldId = "rotorSync"

                            sync = msg.getData() ' @type:AA

                            if sync.type = Rotor.const.ThreadSyncType.DISPATCH


                                dispatcherId = sync.payload.dispatcherId
                                intent = sync.payload.intent
                                dispatcherInstance = m.dispatcherProvider.stack.LookupCI(dispatcherId)

                                ' taskIntent = Rotor.Utils.deepCopy(intent)
                                dispatcherInstance.dispatch(intent)

                            else if sync.type = Rotor.const.ThreadSyncType.REGISTER_EXTERNAL_DISPATCHER

                                for each item in sync.extarnalDispatcherList
                                    m.dispatcherProvider.registerExternalDispatchers(item.dispatcherId, item.externalTaskNode)
                                end for

                                m.notifySyncStatus(Rotor.const.ThreadSyncType.TASK_SYNCED)

                            end if
                        else

                            state = msg.getData()
                            ' if Right(fieldId, 6) = "_model"
                                ' dispatcherId = Left(fieldId, Len(fieldId) - 6)
                            ' else
                                ' throw "This should has not happened."
                                dispatcherId = fieldId
                            ' end if

                            dispatcherInstance = m.dispatcherProvider.get(dispatcherId)
                            dispatcherInstance.notifyListeners(state)

                        end if
                    end if
                end if
            end while
            m.desroy()
        end sub

        sub notifySyncStatus(status as string)

            payload = {
                type: status,
                taskNode: m.taskNode
            }

            if status = Rotor.const.ThreadSyncType.TASK_SYNCING
                payload.append({
                    dispatcherIds: m.dispatcherProvider.stack.Keys(),
                    tasks: m.config.tasks
                })
            end if

            m.taskNode.rootNode.setField("rotorSync", payload)

        end sub

        sub addObserver(fieldId as string, node)
            node.observeFieldScoped(fieldId, m.port)
        end sub

        sub removeObserver(fieldId as string, node)
            node.unobserveFieldScoped(fieldId)
        end sub

        ' DESTROY
        public sub destroy()
            globalScope = GetGlobalAA()
            globalScope.rotor_framework_helper = {
                frameworkInstance: invalid
            }
            m.dispatcherProvider.destroy()
            m.taskNode = invalid
        end sub

    end class

    function getState(dispatcherId as string) as object
        frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
        dispatcherInstance = frameworkInstance.dispatcherProvider.get(dispatcherId)
        return dispatcherInstance.getState(dispatcherId)
    end function

end namespace




