import "../base/basePlugin.bs"

'**
' A Brighterscript class for handling font style attribute in a widget.
'
' @extends BasePlugin class
'/
namespace Rotor
    class DispatcherProviderPlugin extends BasePlugin
        BasePlugin
        ' Constructor
        sub new(key = "dispatcher" as string)
            super(key)
        end sub

        hooks = {
            beforeMount: sub(scope as object, widget as object)
                scope.setDispatcherOnContext(widget.context, widget[scope.key])
            end sub,

            beforeUpdate: sub(scope as object, widget as object, newValue, oldValue = [])
                ' In this plugin, we would like to extend old config on update if it is assocarray
                oldArrayOfDispatcherIds = Rotor.Utils.ensureArray(oldValue ?? [])
                newArrayOfDispatcherIds = Rotor.Utils.ensureArray(newValue)
                widget[scope.key] = Rotor.Utils.extendArrayOfStrings(oldArrayOfDispatcherIds, newArrayOfDispatcherIds)
                scope.setDispatcherOnContext(widget.context, widget[scope.key])
            end sub,

            beforeDestroy: sub(scope as object, widget as object)
                dispatcherFacades = widget.context[scope.key]
                if dispatcherFacades.Count() > 0
                    for each dispatcherFacadeKey in dispatcherFacades
                        dispatcherFacadeInstance = dispatcherFacades[dispatcherFacadeKey]
                        dispatcherFacadeInstance.destroy()
                        widget.context[scope.key][dispatcherFacadeKey] = invalid
                    end for
                end if
            end sub

        }

        sub setDispatcherOnContext(context as object, config as dynamic)
            for each dispatcherId in Rotor.Utils.ensureArray(config)
                if context[m.key] = invalid then context[m.key] = {}
                if not context[m.key].DoesExist(dispatcherId)
                    globalScope = GetGlobalAA()
                    frameworkInstance = globalScope.rotor_framework_helper.frameworkInstance
                    context[m.key][dispatcherId] = frameworkInstance.dispatcherProvider.getFacade(dispatcherId, m)
                end if
            end for
        end sub

    end class

end namespace
