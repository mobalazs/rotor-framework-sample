
' namespace Reducers

class Reducer

    model as object
    middlewares = []

    sub new(modelInstance as object)
        m.modelInstance = modelInstance

        m.getDispatcher = function(dispatcherId as string) as object
            frameworkInstance = GetGlobalAA().rotor_framework_helper.frameworkInstance
            return frameworkInstance.dispatcherProvider.getFacade(dispatcherId, m)
        end function

    end sub

    public function reducer(state as object, intent as Intent)
        return state
    end function

    public sub applyMidleware(middlewares)
        if middlewares.Count() = 0 then return
        middlewares = Rotor.Utils.ensureArray(middlewares)
        m.middlewares.append(middlewares)
    end sub

    function reduce(state as object, intent) as object
        if intent.Count() > 1 and intent.payload = invalid then throw "[WARNING] Intent payload is invalid."

        ' Resolve middlewares
        mwIndex = 0
        mwCount = m.middlewares.Count()
        while intent <> invalid and mwIndex < mwCount
            middlewareFnScoped = m.middlewares[mwIndex]
            m.middlewareFnScoped = middlewareFnScoped
            intent = m.middlewareFnScoped(intent, state)
            mwIndex++
        end while
        m.middlewareFnScoped = invalid ' invalidate scoped fn
        if intent = invalid then return invalid

        ' Resolve Reducer
        newState = m.reducer(state, intent)

        return newState

    end function

    sub destroy()
        m.middlewares.Clear()

        m.modelInstance = invalid ' Do not destroy just invalidate reference
    end sub

end class

' end namespace
