import "../base/basePlugin.bs"

'**
' A Brighterscript class for handling font style attribute in a widget.
'
' @extends BasePlugin class
'/
namespace Rotor
    class FontStylePlugin extends BasePlugin

        ' Constructor
        sub new(key = "fontStyle" as string)
            super(key)
        end sub

        ' This regex is designed to match a pattern starting with the @ symbol, followed by a sequence of characters that can include any character except space, @, or ,.
        configRegex = /(\@|\#)([^\s\@\#\,]*)/i
        pluginKeyRegex = /^[^\.]*/i

        ' Hooks to attach font style attribute handling to widget lifecycle events.
        hooks = {
            beforeMount: sub(scope as object, widget as object)
                ' After a widget is created, set font attributes.
                scope.setFontAttribute(widget)
            end sub,

            beforeUpdate: sub(scope as object, widget as object, newValue, oldValue)
                widget[scope.key] = newValue ?? ""

                ' Before a widget updates, set font attributes.
                scope.setFontAttribute(widget)
            end sub
        }

        ' Sets font attributes on a widget's node if it's a Label.
        sub setFontAttribute(widget as object)
            ' Check if the widget is a Label.
            if widget.sgName = "Label"
                ' Retrieve font style attributes from the widget.
                value = widget[m.key]
                ' Get the node associated with the widget.
                node = widget.node

                if Rotor.Utils.isFunction(value)
                    ' Resolve expression
                    fontStyle = value(widget)

                else if Rotor.Utils.isString(value)

                    results = m.configRegex.MatchAll(value)

                    if results.Count() > 0 and Rotor.Utils.isString(value)
                        for each result in results
                            matchKey = result[2]
                            sourceTypeOperator = result[1]
                            if sourceTypeOperator = "@"
                                source = widget
                            else if sourceTypeOperator = "#"
                                pluginKeyMetcherResult = m.pluginKeyRegex.Match(matchKey)
                                pluginKey = pluginKeyMetcherResult[0]
                                pluginScope = m.frameworkInstance.plugins[pluginKey]
                                #if debug
                                    if pluginScope = invalid then throw "The given plugin key is invalid."
                                #end if
                                source = Rotor.Utils.wrapObject(pluginKey, pluginScope.context)
                            end if

                            if source <> invalid
                            assetValue = Rotor.Utils.getValueByKeyPath(source, matchKey)

                            if Rotor.Utils.isString(assetValue)
                                replaceRegex = CreateObject("roRegex", sourceTypeOperator + matchKey, "ig")
                                value = replaceRegex.ReplaceAll(value, assetValue)
                            else
                                value = assetValue
                                exit for
                            end if
                        end if

                        end for
                    end if

                    fontStyle = value

                else
                    fontStyle = value
                end if


                ' Apply font style attributes to the node.
                Rotor.Utils.setFontAttribute(node, fontStyle)
            end if
        end sub

    end class

end namespace
